//bubble sort
void bubble_sort(int arr[],int n){
    for(int i=0;i<n-1;i++){
        for(int j=0;j<n-i-1;j++){
            if(arr[j]>arr[j+1]){
                swap(arr[j],arr[j+1]);
            }
        }
    }
}

void printarr(int arr[], int n){
    for(int i =0;i<n;i++){
        cout<<arr[i]<<" ";
    }
    cout <<endl;
}

int main() {
   int n=5;
   int arr[]={1,6,2,68,3};
   
   bubble_sort(arr,n);
   printarr(arr,n);
   return 0;
}



//insertion sort
void insertion_sort(int arr[], int n){
    for(int i=1;i<n;i++){
        int curr = arr[i];
        int prev=i-1;
        
        while(prev >= 0 && arr[prev] >curr){
            arr[prev+1] = arr[prev];
            prev--;
        }
        arr[prev+1] = curr; //placing the curr elem in its correct position
    }
}

void printarr(int arr[], int n){
    for(int i =0;i<n;i++){
        cout<<arr[i]<<" ";
    }
    cout <<endl;
}

int main() {
   int n=5;
   int arr[]={1,6,2,68,3};
   
   insertion_sort(arr,n);
   printarr(arr,n);
   return 0;
}



//merge sort

#include<bits/stdc++.h>
using namespace std;

void merge(vector<int> &arr,int st,int mid,int end){
    vector<int>temp;
    int i=st , j=mid+1;
    
    while(i<=mid && j<=end){
        if(arr[i]<arr[j]){
            temp.push_back(arr[i]);
            i++;
        }else{
            temp.push_back(arr[j]);
            j++;
        }
    }
    while(i<=mid){
        temp.push_back(arr[i]);
        i++;
    }
    while(j<=end){
        temp.push_back(arr[j]);
        j++;
    }
    
    for(int idx=0;idx<temp.size();idx++){
        arr[idx+st] = temp[idx];
    }
    
}


void mergeSort(vector<int> &arr,int st,int end){
    if(st < end){
        int mid=st+(end-st)/2;
        
        mergeSort(arr,st,mid);//left half
        mergeSort(arr,mid+1,end);//right half
        
        merge (arr,st,mid,end);
    }
}

int main(){
    vector<int> arr ={12,31,35,8,32,17};
    
    mergeSort(arr,0,arr.size()-1);
    for(int val:arr){
        cout<<val<< " ";
    }
    cout<<endl;
    
    return 0;
}



//quick sort
int partition(vector<int> &arr,int st,int end){
    int idx = st-1,pivot = arr[end];
    for(int j=st; j<end;j++){
        if(arr[j]<=pivot){
            idx++;
            swap(arr[j],arr[idx]);
        }
    }
    idx++;
    swap(arr[end],arr[idx]);
    return idx;
}

void quickSort(vector<int> &arr,int st,int end){
    if(st<end){
        int pivIdx = partition(arr,st,end);
        
        quickSort(arr,st,pivIdx-1);//left half
        quickSort(arr,pivIdx+1,end);//right half
    }
}

int main(){
    vector<int> arr ={12,31,35,8,32,17};
    
    quickSort(arr,0,arr.size()-1);
    
    for(int val:arr){
        cout<<val<< " ";
    }
    cout<<endl;
    
    return 0;
}
